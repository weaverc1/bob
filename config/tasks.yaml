architecture_design:
  description: >
    Design the complete ROS2 system architecture for the autonomous lawn mower
  expected_output: >
    A comprehensive architecture document including:
    - System component diagram showing all ROS2 nodes and their relationships
    - Data flow diagram showing topic/service communication patterns
    - Hardware-software integration points
    - Sensor fusion strategy
    - Control loop architecture
    - Safety layer integration
    - Recommended ROS2 packages for each component
    The output should be in Markdown format with mermaid diagrams where appropriate.
  agent: system_architect

safety_analysis:
  description: >
    Identify all safety-critical operations and design fail-safe mechanisms for the autonomous lawn mower
  expected_output: >
    A detailed safety analysis document including:
    - HAZOP (Hazard and Operability) analysis of all operational modes
    - List of fail-safe mechanisms (emergency stop, blade disable, timeout watchdogs)
    - Safety-critical sensor redundancy requirements
    - Recovery behaviors for common failure modes
    - Recommended safety-rated hardware components
    - ROS2 safety monitor node specifications
    Format: Markdown with risk matrices and safety requirement tables.
  agent: safety_engineer

navigation_stack_selection:
  description: >
    Select and configure the optimal SLAM and navigation stack for outdoor lawn mowing operations
  expected_output: >
    A navigation stack configuration guide including:
    - SLAM algorithm selection (e.g., SLAM Toolbox, Cartographer) with justification
    - Nav2 planner and controller plugin recommendations
    - Costmap configuration strategy for grass/lawn environments
    - Recovery behavior configuration
    - Parameter files for initial tuning
    - Integration points with localization sensors (GPS, IMU, wheel odometry)
    Format: Markdown with YAML configuration snippets.
  agent: navigation_specialist

differential_drive_design:
  description: >
    Design a robust differential drive control system that handles traction slippage on grass
  expected_output: >
    A differential drive control specification including:
    - Recommended ros2_control controllers and hardware interfaces
    - Odometry fusion strategy (wheel encoders + IMU + optional GPS)
    - Traction slip detection and mitigation approaches
    - PID tuning guidelines for grass terrain
    - Transmission configuration for URDF
    - Test protocols for validating odometry accuracy
    Format: Markdown with configuration examples and equations.
  agent: differential_drive_specialist

package_search:
  description: >
    Search for and catalog existing ROS2 Jazzy packages relevant to autonomous lawn mowing
  expected_output: >
    A curated list of ROS2 packages including:
    - Differential drive controllers
    - SLAM implementations
    - Navigation stacks (Nav2 components)
    - Sensor drivers (Lidar, IMU, GPS, cameras)
    - Gazebo plugins for simulation
    - Safety monitoring tools
    For each package: name, repository URL, maintenance status, brief description, and recommended use case.
    Format: Markdown table with links.
  agent: ros_code_hunter

urdf_design:
  description: >
    Design URDF/Xacro models for both the full-size mower and indoor test platform
  expected_output: >
    URDF design specifications including:
    - Base link and joint structure
    - Wheel and caster configurations
    - Sensor mounting points and transforms
    - Inertial properties (mass, inertia tensors)
    - Collision and visual geometry specifications
    - Plugin attachment points for Gazebo
    Provide two designs: outdoor mower and scaled-down indoor testbot.
    Format: Markdown with Xacro code snippets and link to full files.
  agent: simulator

gazebo_world_design:
  description: >
    Design Gazebo world files for testing lawn mowing scenarios
  expected_output: >
    Gazebo world design specifications including:
    - Outdoor yard world with grass terrain, trees, and obstacles
    - Indoor test arena with simplified obstacles
    - Ground plane properties (friction, damping for grass simulation)
    - Lighting and environmental conditions
    - Static model placements (fences, flower beds, etc.)
    Format: Markdown with world file snippets and asset requirements.
  agent: simulator

component_test_protocol:
  description: >
    Create an incremental testing protocol for validating each hardware and software component
  expected_output: >
    A testing protocol document including:
    - Component testing sequence (sensors first, then actuators, then integration)
    - ROS2 introspection commands for validation (ros2 topic echo, ros2 node info)
    - Expected output criteria for each component
    - Test automation scripts using launch_test
    - Integration testing milestones
    Format: Markdown with bash commands and Python test script examples.
  agent: test_specialist

feasibility_review:
  description: >
    Review all proposed system components and prioritize based on budget and time constraints
  expected_output: >
    A prioritized roadmap including:
    - Must-have features for MVP (minimum viable product)
    - Nice-to-have features for future iterations
    - Estimated time and cost for each component
    - Quick wins that deliver early value
    - Components that can be simplified or delayed
    - Risk assessment for complex components
    Format: Markdown with priority matrix and Gantt chart recommendations.
  agent: realist

launch_system_design:
  description: >
    Design a modular launch file architecture for the ROS2 system
  expected_output: >
    A launch system specification including:
    - Launch file hierarchy (base system, sensors, navigation, simulation)
    - Parameter file organization strategy
    - Namespace conventions
    - Composable node usage recommendations
    - Example launch files for common operational modes
    Format: Markdown with Python launch file examples.
  agent: ros_infrastructure_builder

controller_integration_plan:
  description: >
    Plan the integration of ros2_control with Gazebo simulation and real hardware
  expected_output: >
    A controller integration plan including:
    - ros2_control hardware interface selection
    - Controller manager configuration
    - Transmission element specifications for URDF
    - Gazebo plugin selection (gazebo_ros2_control)
    - Parameter tuning approach for realistic simulation
    - Hardware abstraction strategy for sim-to-real transfer
    Format: Markdown with YAML configuration examples.
  agent: controller_plugin_integrator

knowledge_base_creation:
  description: >
    Compile all relevant documentation, tutorials, and package references into a centralized knowledge base
  expected_output: >
    A knowledge base document containing:
    - Links to all ROS2 packages being used
    - Relevant ROS2 tutorials and documentation
    - Hardware datasheets and specifications
    - Configuration file locations
    - Troubleshooting guides for common issues
    - Team decision log (why certain packages/approaches were chosen)
    Format: Markdown with organized sections and hyperlinks.
  agent: system_architect

bob_remote_deployment:
  description: >
    Deploy ROS2 Jazzy and all required packages to BOB (Raspberry Pi 4 at 192.168.86.62) via SSH.
    Use the SSH tool to remotely configure the system. BOB connection details are in config/bob_config.yaml.
    All hardware is already connected: ESP32 (motor driver, encoders, IMU), SLLIDAR, motors.
  expected_output: >
    A deployment report containing:
    - System check results (Ubuntu version, existing ROS2, disk space, USB devices)
    - Cleanup actions performed (old ROS2 removal, workspace cleanup)
    - ROS2 Jazzy installation status and verification
    - Package installation status (Nav2, SLAM Toolbox, robot_localization, ros2-control, ros-gz, etc.)
    - Workspace creation and build status (/home/bob/bob_ws)
    - udev rules creation for ESP32 (/dev/ttyESP32) and LIDAR (/dev/ttyLIDAR)
    - USB device detection and mapping
    - Final system verification (ros2 pkg list, device connections, environment setup)
    - Any errors encountered and resolutions
    - Next steps for manual verification
    Format: Detailed deployment log in Markdown with command outputs and verification results.
  agent: remote_deployment_specialist

system_architecture_review:
  description: >
    Conduct a comprehensive review of the entire BOB autonomous mower system architecture.
    Review the dual-system setup: Development machine (Ubuntu 24.04, ROS2 Jazzy, Gazebo simulation)
    and BOB Raspberry Pi 4 (Ubuntu 24.04, ROS2 Jazzy, physical hardware). Evaluate against best
    practices, budget constraints, and project goals. Review hardware specifications in
    config/hardware_inventory.yaml and config/bob_config.yaml. Consider ESP32-ROS2 bridge design,
    sensor integration, navigation stack configuration, and deployment strategy.
  expected_output: >
    A comprehensive architecture review document containing:
    - Executive summary of current architecture
    - Development machine setup evaluation (strengths, weaknesses, recommendations)
    - BOB (Raspberry Pi) setup evaluation (resource constraints, performance considerations)
    - Hardware configuration review (ESP32, BNO086, SLLIDAR, motors, encoders)
    - ESP32-ROS2 bridge architecture assessment (custom serial vs micro-ROS)
    - ROS2 package selection validation (Nav2, SLAM Toolbox, robot_localization, ros2-control)
    - Sensor fusion strategy review (IMU + encoders + LIDAR + GPS)
    - Navigation stack configuration recommendations
    - Safety system architecture review (ISO 13849 PL d compliance)
    - Simulation-to-hardware workflow evaluation
    - Budget and resource constraint analysis
    - Best practice compliance assessment
    - Risk identification and mitigation strategies
    - Prioritized recommendations (quick wins vs long-term improvements)
    - Architecture decision record (ADR) for key choices made
    Format: Detailed Markdown report with sections for each component and clear recommendations.
  agent: system_architect

micro_ros_esp32_integration:
  description: >
    Design a comprehensive Micro-ROS integration plan for ESP32 to replace the custom serial protocol.
    This is the #1 Quick Win from the architecture review with HIGH impact. The ESP32 currently connects
    via custom serial @ 115200 baud. Micro-ROS provides standardized ROS2 integration with native message
    types, reducing development overhead. ESP32 hardware specs in docs/COMPLETE_HARDWARE_SPEC.md:
    - ESP32-WROOM-32 Arduino board
    - L298N motor driver (GPIO 25,26,27,33 PWM + direction)
    - BNO086 IMU on I2C (address 0x4B, 100Hz update rate)
    - Wheel encoders on GPIO 32,35 (20 pulses/rev, 413 pulses/meter)
    - Serial connection to Raspberry Pi @ 115200 baud
    - Differential drive: 250x160mm wheelbase, 67mm wheels
    Review micro-ROS Arduino library, design ROS2 node architecture on ESP32, define message flow,
    and create implementation roadmap.
  expected_output: >
    A detailed Micro-ROS integration plan containing:
    - Micro-ROS overview and benefits vs custom serial protocol
    - ESP32 firmware architecture using micro-ROS Arduino library
    - ROS2 node design on ESP32 (publishers, subscribers, services)
    - Message type definitions (cmd_vel subscriber, odom publisher, imu publisher, encoder data)
    - Hardware interface design (motor control, encoder reading, IMU integration)
    - Communication protocol and QoS settings
    - Build environment setup (PlatformIO or Arduino IDE with micro-ROS)
    - Flash and deployment process to ESP32
    - Testing strategy (unit tests, integration tests with ROS2 on Raspberry Pi)
    - Migration plan from custom serial to micro-ROS
    - Code examples for key components
    - Estimated effort and timeline (2-3 days as per architecture review)
    - Dependencies and prerequisites
    - Troubleshooting guide
    Format: Comprehensive Markdown document with code snippets, diagrams, and step-by-step instructions.
  agent: differential_drive_specialist

esp32_firmware_review:
  description: >
    Conduct a comprehensive technical review of the ESP32 micro-ROS firmware implementation.
    Review the firmware code at firmware/bob_microros_esp32/bob_microros_esp32.ino against
    the integration plan at output/micro_ros_integration_plan.md and hardware specifications
    in docs/COMPLETE_HARDWARE_SPEC.md. This is a critical code review to ensure the firmware
    is production-ready, follows best practices, and correctly implements:
    - Micro-ROS integration (publishers, subscribers, executor)
    - Motor control for L298N driver (PWM + direction control)
    - Encoder reading with interrupts (GPIO 34,35)
    - BNO086 IMU integration via I2C (address 0x4B, 100Hz)
    - Odometry computation from encoders (413 pulses/meter)
    - Differential drive kinematics (250x160mm wheelbase, 67mm wheels)
    - Error handling and safety considerations
    - Resource usage (memory, CPU)
    - ROS2 message correctness
    Review installation instructions for completeness and accuracy.
  expected_output: >
    A detailed firmware code review document containing:
    - Executive summary (overall assessment, major findings)
    - Code quality assessment (structure, readability, maintainability)
    - Micro-ROS implementation review (node setup, publishers/subscribers, executor)
    - Hardware interface review (pin assignments, PWM configuration, interrupts)
    - Motor control logic review (kinematics, PWM mapping, direction control)
    - Encoder implementation review (ISR design, count accuracy, rollover handling)
    - IMU integration review (I2C communication, sensor configuration, data publishing)
    - Odometry algorithm review (pose estimation, velocity computation, quaternion math)
    - Safety and error handling review (watchdogs, failsafes, LED indicators)
    - Performance analysis (CPU usage, memory footprint, timing constraints)
    - Message format verification (ROS2 standard compliance)
    - Installation guide review (accuracy, completeness, user-friendliness)
    - Bug identification (critical, major, minor issues found)
    - Improvement recommendations (code optimizations, features, best practices)
    - Testing recommendations (unit tests, integration tests, edge cases)
    - Production readiness assessment (go/no-go decision with justification)
    Format: Detailed Markdown report with code snippets, specific line references, and actionable recommendations.
  agent: differential_drive_specialist
