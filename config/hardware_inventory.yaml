# Hardware Inventory for AI Mower
# Updated with actual testbot specifications

# ============================================================================
# TESTBOT (Indoor Test Platform) - ACTUAL SPECIFICATIONS
# ============================================================================
testbot:
  base_frame: base_link
  robot_type: differential_drive

  # Actual dimensions from turtlebot.urdf
  dimensions:
    length: 0.250  # meters (front to back)
    width: 0.160   # meters (side to side)
    height: 0.05   # meters (base body height)
    wheelbase: 0.135  # meters (distance between left and right wheels - 2*0.0675)
    wheel_radius: 0.0335  # meters (33.5mm)
    wheel_width: 0.020    # meters (20mm)
    caster_radius: 0.015  # meters (15mm)
    ground_clearance: 0.020  # meters (approximate - from caster)

  # Actual mass properties from URDF
  mass:
    total_mass: 1.125  # kg (0.875 base + 0.1*2 wheels + 0.05 caster)
    base_mass: 0.875   # kg
    wheel_mass: 0.1    # kg (each)
    caster_mass: 0.05  # kg

  # Sensors (currently equipped)
  sensors:
    - name: imu
      type: IMU
      model: TBD  # To be specified
      mass: 0.01  # kg
      mount_location: [-0.200, 0, 0.025]  # relative to base_link
      frame_id: imu_link
      ros_driver: TBD

    - name: lidar
      type: 2D Lidar
      model: TBD  # To be specified
      mass: 0.1  # kg
      mount_location: [-0.1, 0, 0.046]  # relative to base_link
      frame_id: lidar_link
      dimensions:
        radius: 0.035  # meters
        height: 0.04   # meters
      ros_driver: TBD

# ============================================================================
# FULL-SIZE MOWER - TO BE SPECIFIED
# ============================================================================
mower:
  base_frame: mower_base_link
  robot_type: differential_drive

  # Dimensions (in meters) - TO BE FILLED
  dimensions:
    length: null  # meters (front to back)
    width: null   # meters (side to side)
    height: null  # meters (ground to top)
    wheelbase: null  # meters (distance between left and right wheels)
    wheel_radius: null  # meters
    ground_clearance: null  # meters

  # Mass Properties - TO BE FILLED
  mass:
    total_mass: null  # kg
    payload_capacity: null  # kg

# ============================================================================
# COMPUTE PLATFORM - ACTUAL HARDWARE
# ============================================================================
compute_unit:
  name: Raspberry Pi (Model 4 or 5)
  hostname: bob-mower
  user: bob
  os: Ubuntu (ROS2 Humble compatible)
  ros_version: Humble Hawksbill

# ============================================================================
# MICROCONTROLLER - ESP32
# ============================================================================
microcontroller:
  name: ESP32 Development Board
  framework: Arduino
  communication:
    interface: USB Serial
    baudrate: 115200
    device_path: /dev/ttyESP32
    usb_chipset: Silicon Labs CP210x
    usb_id: "10c4:ea60"
  i2c:
    sda_pin: 21
    scl_pin: 22
  gpio_assignments:
    imu_reset_pin: 19
    imu_interrupt_pin: 18
    left_encoder_pin: 32  # with internal pullup
    right_encoder_pin: 35  # with internal pullup
    left_motor_in1: 27
    left_motor_in2: 26
    left_motor_ena_pwm: 14
    right_motor_in3: 25
    right_motor_in4: 33
    right_motor_enb_pwm: 12
  pwm_config:
    resolution: 8  # bits (0-255)
    frequency: 10000  # Hz
    working_range_min: 170  # PWM value
    working_range_max: 255  # PWM value
    optimal_range_min: 220
    optimal_range_max: 255

# ============================================================================
# SENSORS - ACTUAL HARDWARE
# ============================================================================
sensors:
  - name: bno086_imu
    type: IMU (9-axis)
    model: SparkFun BNO08x (BNO086)
    interface: I2C
    i2c_address: "0x4B"
    i2c_pins:
      sda: 21
      scl: 22
    update_rate: 100  # Hz
    update_interval: 10  # ms
    capabilities:
      - Gyro-integrated rotation vector
      - Linear acceleration
      - Angular velocity
      - Stability classifier
    output_data:
      quaternion: [i, j, k, real]
      angular_velocity: [x, y, z]  # rad/s
      linear_acceleration: [x, y, z]  # m/s²
      stability_status: true
    sensor_ranges:
      accelerometer: 16  # ±g (160 m/s²)
      gyroscope: 2000  # ±deg/s (35 rad/s)
    mount_location: [-0.200, 0, 0.025]  # relative to base_link [x, y, z] meters
    frame_id: imu_link
    mass: 0.01  # kg
    ros_driver: bno08x_driver (to be developed/integrated)

  - name: sllidar
    type: 2D Lidar
    model: SLAMTEC/RoboPeak SLLIDAR (A1/A2)
    interface: Serial UART
    device_path: /dev/ttyLIDAR
    usb_chipset: Silicon Labs CP210x
    usb_id: "10c4:ea60"
    baudrate_options:
      a1_a2: 1000000
      a3: 256000
    default_baudrate: 1000000
    specifications:
      scan_angle: 360  # degrees
      update_frequency: 10  # Hz
      max_range: 8.0  # meters
      angle_compensation: true
    mount_location: [-0.1, 0, 0.046]  # relative to base_link
    frame_id: laser_frame
    dimensions:
      diameter: 0.070  # meters (70mm)
      height: 0.040  # meters (40mm)
    mass: 0.1  # kg
    ros_driver: sllidar_ros2

  - name: camera_c270
    type: RGB Camera (USB Webcam)
    model: Logitech C270
    interface: USB Video Class (UVC)
    device_path: /dev/video_robot  # or /dev/video0
    usb_id: "046d:0825"
    specifications:
      resolution_default: [640, 480]
      resolution_max: [1280, 720]
      frame_rate: 30  # FPS
      pixel_format: YUYV/MJPEG
    features:
      auto_white_balance: true
      auto_exposure: true
      manual_focus: true
    adjustable_parameters:
      brightness: 128
      contrast: 128
      saturation: 128
      gain: 100
    ros_driver: usb_cam
    future_use: Vision processing, object detection

  - name: gps_module
    type: GPS Receiver
    model: Generic GPS with PL2303 adapter
    interface: USB-Serial
    usb_chipset: Prolific PL2303
    usb_id: "067b:2303"
    status: Connected, not yet integrated
    intended_use: Absolute positioning for lawn coverage tracking
    ros_driver: TBD (nmea_navsat_driver or similar)

# ============================================================================
# WHEEL ENCODERS
# ============================================================================
encoders:
  type: Optical rotary encoders with hall effect
  count: 2  # left and right wheels
  specifications:
    holes_per_revolution: 20
    pulses_per_meter: 413
    pulses_per_360_rotation: 206
    meters_per_pulse: 0.00334  # meters
  gpio_connections:
    left_encoder: 32  # GPIO with internal pullup
    right_encoder: 35  # GPIO with internal pullup
  signal_processing:
    trigger: rising_edge
    debounce_ms: 1
    update_rate: 100  # Hz
    update_interval: 10  # ms
  calibration:
    wheel_circumference: 0.2105  # meters (π × 0.067m)
    ticks_per_revolution: 20

# ============================================================================
# ACTUATORS - ACTUAL HARDWARE
# ============================================================================
actuators:
  - name: left_wheel_motor
    type: DC Geared Motor with Encoder
    model: Generic DC Motor
    estimated_power: 350  # W (based on controller discussions)
    max_rpm: 200
    tested_speed_pwm: 250  # out of 255
    interface: L298N H-Bridge
    gpio_pins:
      in1: 27  # Direction control
      in2: 26  # Direction control
      ena: 14  # PWM speed control
    forward_direction:
      in1: HIGH
      in2: LOW
    encoder:
      gpio_pin: 32
      pulses_per_rev: 20
      type: optical_hall_effect

  - name: right_wheel_motor
    type: DC Geared Motor with Encoder
    model: Generic DC Motor
    estimated_power: 350  # W
    max_rpm: 200
    tested_speed_pwm: 250  # out of 255
    interface: L298N H-Bridge
    gpio_pins:
      in3: 25  # Direction control
      in4: 33  # Direction control
      enb: 12  # PWM speed control
    forward_direction:
      in3: LOW
      in4: HIGH
    encoder:
      gpio_pin: 35
      pulses_per_rev: 20
      type: optical_hall_effect

  - name: blade_motor
    type: TBD
    model: TBD
    safety_interlock: true
    status: Not yet specified

# ============================================================================
# MOTOR CONTROLLERS - ACTUAL HARDWARE
# ============================================================================
controllers:
  - name: l298n_driver
    type: Dual H-Bridge Motor Driver
    model: L298N
    channels: 2
    voltage_compatible: true  # Compatible with robot power system
    pwm_control: true
    gpio_connections:
      left_motor:
        in1: 27
        in2: 26
        ena_pwm: 14
      right_motor:
        in3: 25
        in4: 33
        enb_pwm: 12
    pwm_specifications:
      resolution: 8  # bits (0-255)
      frequency: 10000  # Hz
      minimum_threshold: 170
      optimal_range: [220, 255]

# ============================================================================
# POWER SYSTEM
# ============================================================================
power:
  battery:
    type: TBD  # To be specified
    voltage: null  # V (6-60V capable based on motor controller)
    capacity: null  # Ah
    cells: null
  voltage_regulator:
    output_5v: true  # for Raspberry Pi
    output_12v: null  # for motors (if needed)
  future_considerations:
    - Automated charging dock integration

# ============================================================================
# SAFETY COMPONENTS
# ============================================================================
safety:
  emergency_stop:
    type: TBD
    interface: null
  blade_guard:
    enabled: true
  bump_sensors:
    count: null
    type: TBD
  tilt_sensor:
    enabled: null
    max_tilt_angle: null  # degrees
  blade_interlock:
    enabled: true
    safety_standard: ISO 13849 PL d (recommended)

# ============================================================================
# COMMUNICATION & CONTROL
# ============================================================================
communication:
  wifi:
    enabled: true
    standard: null  # Built into Raspberry Pi
  bluetooth:
    enabled: false
  remote_control:
    enabled: true
    type: 8bitdo Pro2 Game Controller
    interface: USB (Pygame joystick)
    control_mapping:
      forward_backward: axis_1  # Left stick vertical
      turning: axis_2  # Right stick horizontal
      deadzone: 0.015  # 1.5%
    purpose: Teleoperation

# ============================================================================
# USB HUB & SERIAL ADAPTERS
# ============================================================================
usb_infrastructure:
  - name: via_labs_usb_hub
    model: VIA Labs USB Hub
    usb_id: "2109:3431"
    purpose: Manages multiple USB devices

  - name: cp210x_uart_bridge_esp32
    model: Silicon Labs CP210x
    usb_id: "10c4:ea60"
    purpose: ESP32 connection

  - name: cp210x_uart_bridge_lidar
    model: Silicon Labs CP210x
    usb_id: "10c4:ea60"
    purpose: LIDAR connection

# ============================================================================
# ROBOT PHYSICAL PARAMETERS (CALIBRATED)
# ============================================================================
robot_physical_parameters:
  wheel_diameter: 0.067  # meters (67mm)
  wheel_separation: 0.135  # meters (135mm track width)
  base_dimensions:
    length: 0.250  # meters
    width: 0.160  # meters
    height: 0.050  # meters
  total_mass: 0.875  # kg (plus battery/electronics)
  center_of_mass_offset: -0.090  # meters from front

# ============================================================================
# INTEGRATION ARCHITECTURE
# ============================================================================
integration_notes: |
  HARDWARE ARCHITECTURE:
  - ESP32 handles low-level motor control, encoder reading, and IMU integration
  - Raspberry Pi runs ROS2 Humble with high-level navigation and planning
  - Serial bridge (115200 baud) connects ESP32 to Raspberry Pi
  - LIDAR connects directly to Raspberry Pi via USB-Serial
  - Camera connects via USB UVC

  KEY CHALLENGES FOR AI CREW TO ADDRESS:
  1. ESP32-ROS2 bridge design (micro-ROS vs custom serial protocol)
  2. Real-time motor control coordination
  3. Sensor fusion architecture (IMU + encoders + LIDAR)
  4. Safety system integration (blade control, emergency stop)
  5. Navigation stack configuration for outdoor autonomous mowing
  6. Power management and battery monitoring
  7. GPS integration for absolute positioning
  8. Controller input handling for teleoperation

  TESTBOT TO FULL-SIZE MOWER SCALING:
  - Testbot provides 1:3-4 scale validation platform
  - Same sensor suite and control architecture
  - Scaled motor power and battery capacity for full mower
